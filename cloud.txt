Étapes pour déployer votre application Django et MongoDB sur GCP
1. Prérequis :
Avoir un compte Google Cloud.
Installer Google Cloud SDK.
Avoir gcloud, docker, et kubectl installés et configurés.
Avoir votre projet Django prêt avec le fichier Dockerfile et docker-compose.yml.
2. Créer un projet GCP :
Connectez-vous à Google Cloud Console.
Créez un projet (si ce n'est pas déjà fait) et prenez note du nom du projet.
3. Activer les API nécessaires :
Activez l'API Google Kubernetes Engine API, Cloud Build API, Container Registry API, Cloud Storage API, et Cloud SQL API.
Vous pouvez activer ces API via la console GCP ou utiliser la commande suivante dans Google Cloud SDK :
bash
Copier le code
gcloud services enable container.googleapis.com cloudbuild.googleapis.com containerregistry.googleapis.com sqladmin.googleapis.com
4. Configurer Google Cloud SDK :
Connectez-vous avec votre compte Google Cloud :
bash
Copier le code
gcloud auth login
Sélectionnez le projet avec lequel vous allez travailler :
bash
Copier le code
gcloud config set project <PROJECT_ID>
------------------------------------------------------------------------------
5. Construire l'image Docker et la pousser vers Google Container Registry :
Dans votre répertoire de projet, construisez l'image Docker en utilisant le fichier Dockerfile :

bash
Copier le code
docker build -t gcr.io/<PROJECT_ID>/gestion_bibliotheque .
Remplacez <PROJECT_ID> par l'ID de votre projet GCP.

Poussez l'image Docker vers le Google Container Registry :

bash
Copier le code
docker push gcr.io/<PROJECT_ID>/gestion_bibliotheque
6. Configurer Kubernetes (Google Kubernetes Engine - GKE) :
Créer un cluster Kubernetes : Vous pouvez créer un cluster Kubernetes dans Google Kubernetes Engine :

bash
Copier le code
gcloud container clusters create gestion-cluster \
    --zone us-central1-a \
    --num-nodes 3
Se connecter au cluster : Une fois le cluster créé, connectez-vous à votre cluster Kubernetes :

bash
Copier le code
gcloud container clusters get-credentials gestion-cluster --zone us-central1-a --project <PROJECT_ID>
7. Déployer l'application avec Kubernetes :
Créer un fichier de déploiement Kubernetes (deployment.yml) : Ce fichier définit les ressources nécessaires pour déployer votre application Django et MongoDB sur Kubernetes.

Exemple de deployment.yml :

yaml
Copier le code
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gestion-bibliotheque-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gestion-bibliotheque
  template:
    metadata:
      labels:
        app: gestion-bibliotheque
    spec:
      containers:
      - name: gestion-bibliotheque
        image: gcr.io/<PROJECT_ID>/gestion_bibliotheque
        ports:
        - containerPort: 8000
        env:
        - name: MONGO_URI
          value: "mongodb://<MONGO_DB_SERVICE>:27017"
      - name: mongo
        image: mongo:latest
        ports:
        - containerPort: 27017
Remarque :

Remplacez <PROJECT_ID> par votre ID de projet.
Assurez-vous de configurer l'URI MongoDB correctement. Ici, nous utilisons MongoDB qui peut être exécuté dans le même cluster Kubernetes.
Créer le service Kubernetes pour exposer votre application : Ajoutez un fichier service.yml pour exposer votre application et MongoDB à l'extérieur :

yaml
Copier le code
apiVersion: v1
kind: Service
metadata:
  name: gestion-bibliotheque-service
spec:
  selector:
    app: gestion-bibliotheque
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
  type: LoadBalancer
8. Déployer sur Kubernetes :
Appliquez les fichiers de déploiement et de service :
bash
Copier le code
kubectl apply -f deployment.yml
kubectl apply -f service.yml
9. Accéder à l'application :
Après quelques minutes, GKE provisionnera un Load Balancer avec une IP publique pour accéder à votre application Django.

Pour voir l'IP de votre service, utilisez la commande suivante :

bash
Copier le code
kubectl get svc
Une fois l'IP publique affichée, vous pouvez accéder à votre application Django à partir de n'importe quel navigateur via l'IP publique ou le nom de domaine associé.

10. Configurer la base de données MongoDB :
Si vous utilisez MongoDB dans GKE, le service MongoDB est généralement accessible depuis d'autres pods dans le même cluster en utilisant l'URI MongoDB dans la variable d'environnement MONGO_URI.

Sinon, vous pouvez utiliser MongoDB Atlas pour héberger votre base de données MongoDB et la connecter à votre application Django. Assurez-vous de configurer correctement votre chaîne de connexion MongoDB dans les paramètres Django.